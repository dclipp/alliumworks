{"mnemonics":{"ADD":{"description":"Computes the sum of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> and <span class=\"ff-monospace\">ACCUMULATOR</span>","args":[{"description":"The number to be added to <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-any","lexicalType":"integer","name":"value"}],"flags":{"Overflow":"raised when the resultant sum is greater than the maximum value, based on the register size","RegisterSizeMismatch":"Raised when the size of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> is not equal to the size of <span class=\"ff-monospace\">ACCUMULATOR</span>"}},"SUB":{"description":"Computes the difference of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number to be subtracted from <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-any","lexicalType":"integer","name":"value"}],"flags":{"Underflow":"raised when the resultant difference is nominally less than zero","RegisterSizeMismatch":"Raised when the size of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> is not equal to the size of <span class=\"ff-monospace\">ACCUMULATOR</span>"}},"MULT":{"description":"Computes the product of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number by which to multiply <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-any","lexicalType":"integer","name":"value"}],"flags":{}},"DIV":{"description":"Computes the (integer) quotient of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number by which to divide <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-any","lexicalType":"integer","name":"value"}],"flags":{}},"MOD":{"description":"Computes the integer remainder of <span class=\"ff-monospace\">ACCUMULATOR</span> divided by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number by which to divide <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-any","lexicalType":"integer","name":"value"}],"flags":{}},"MEMREAD":{"description":"Reads the byte of memory located at <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The address of the byte to be read","dataType":"regref-full","lexicalType":"address","name":"address"},{"description":"The register in which to load the memory value","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{}},"MEMREAD_Q":{"description":"Reads 4 sequential bytes of memory beginning at <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The address of the quad byte to be read","dataType":"regref-full","lexicalType":"address","name":"address"},{"description":"The register in which to load the memory value","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{}},"MEMREAD_X":{"description":"Reads 3 sequential bytes of memory beginning at <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The address of the tri-byte to be read","dataType":"regref-full","lexicalType":"address","name":"address"},{"description":"The register in which to load the memory value","dataType":"regref-tri","lexicalType":"integer","name":"destination"}],"flags":{}},"MEMREAD_D":{"description":"Reads 2 sequential bytes of memory beginning at <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The address of the double-byte to be read","dataType":"regref-full","lexicalType":"address","name":"address"},{"description":"The register in which to load the memory value","dataType":"regref-double","lexicalType":"integer","name":"destination"}],"flags":{}},"MEMWRITE":{"description":"Writes the byte value stored in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> to memory at the address specified in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The address to be written to","dataType":"regref-full","lexicalType":"address","name":"address"},{"description":"The value to be written","dataType":"regref-byte","lexicalType":"integer","name":"value"}],"flags":{"OutOfBounds":"Raised if the computer's total memory size is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference or <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte register reference"}},"MEMWRITE_Q":{"description":"Writes the quad byte value stored in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> to memory at the address specified in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The start address to be written to","dataType":"regref-full","lexicalType":"address","name":"address"},{"description":"The value to be written","dataType":"regref-full","lexicalType":"integer","name":"value"}],"flags":{"OutOfBounds":"Raised if the computer's total memory size is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> + 4","RegisterSizeMismatch":"Raised if either <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> or <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference"}},"MEMWRITE_X":{"description":"Writes the triple byte value stored in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> to memory beginning at the address specified in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The start address to be written to","dataType":"regref-full","lexicalType":"address","name":"address"},{"description":"The value to be written","dataType":"regref-tri","lexicalType":"integer","name":"value"}],"flags":{"OutOfBounds":"Raised if the computer's total memory size is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> + 3","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference or <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> is not a triple byte register reference"}},"MEMWRITE_D":{"description":"Writes the double byte value stored in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> to memory beginning at the address specified in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The start address to be written to","dataType":"regref-full","lexicalType":"address","name":"address"},{"description":"The value to be written","dataType":"regref-double","lexicalType":"integer","name":"value"}],"flags":{"OutOfBounds":"Raised if the computer's total memory size is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> + 2","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference or <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> is not a double byte register reference"}},"PUSH":{"description":"Writes the quad byte value stored in <span class=\"ff-monospace\">INSTRUCTIONPTR</span> to memory at the address specified in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The start address to be written to","dataType":"inline-quad","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the computer's total memory size is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> + 4","RegisterSizeMismatch":"Raised if either <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> or <span class=\"ff-monospace\"><span class=\"generic-arg-name\"></span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference"}},"PUSH_Q":{"description":"Writes the quad byte value stored in <span class=\"ff-monospace\">ACCUMULATOR</span> to memory at the address specified in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The start address to be written to","dataType":"inline-quad","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the computer's total memory size is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> + 4","RegisterSizeMismatch":"Raised if either <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> or <span class=\"ff-monospace\"><span class=\"generic-arg-name\"></span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference"}},"PUSH_X":{"description":"Writes the quad byte value stored in <span class=\"ff-monospace\">MONDAY</span> to memory at the address specified in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The start address to be written to","dataType":"inline-quad","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the computer's total memory size is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> + 4","RegisterSizeMismatch":"Raised if either <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> or <span class=\"ff-monospace\"><span class=\"generic-arg-name\"></span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference"}},"PUSH_D":{"description":"Writes the quad byte value stored in <span class=\"ff-monospace\">TUESDAY</span> to memory at the address specified in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The start address to be written to","dataType":"inline-quad","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the computer's total memory size is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> + 4","RegisterSizeMismatch":"Raised if either <span class=\"ff-monospace\"><span class=\"generic-arg-name\">address</span><span class=\"resolved-arg-name\">TODO</span></span> or <span class=\"ff-monospace\"><span class=\"generic-arg-name\"></span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference"}},"IPUSH":{"description":"","args":[],"flags":{}},"IPUSH_Q":{"description":"","args":[],"flags":{}},"IPUSH_X":{"description":"","args":[],"flags":{}},"IPUSH_D":{"description":"","args":[],"flags":{}},"POP":{"description":"Reads a single byte into <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> from the stack and decrements the address stored in <span class=\"ff-monospace\">STKPTR</span> by 1","args":[{"description":"The register in which to write the popped value","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte register reference","OutOfBounds":"Raised if the current stack address is zero"}},"POP_Q":{"description":"Reads 4 bytes into <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> from the stack and decrements the address stored in <span class=\"ff-monospace\">STKPTR</span> by 4","args":[{"description":"The register in which to write the popped value","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{"OutOfBounds":"Raised if the current stack address is less than 4","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad register reference"}},"POP_X":{"description":"Reads 3 bytes into <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> from the stack and decrements the address stored in <span class=\"ff-monospace\">STKPTR</span> by 3","args":[{"description":"The register in which to write the popped value","dataType":"regref-tri","lexicalType":"integer","name":"destination"}],"flags":{"OutOfBounds":"Raised if the current stack address is less than 3","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a triple byte register reference"}},"POP_D":{"description":"Reads 2 bytes into <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> from the stack and decrements the address stored in <span class=\"ff-monospace\">STKPTR</span> by 2","args":[{"description":"The register in which to write the popped value","dataType":"regref-double","lexicalType":"integer","name":"destination"}],"flags":{"OutOfBounds":"Raised if the current stack address is less than 2","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a double byte register reference"}},"LOAD_INSTRUCTIONPTR":{"description":"Sets the value of <span class=\"ff-monospace\">INSTRUCTIONPTR</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">INSTRUCTIONPTR</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_ACCUMULATOR":{"description":"Sets the value of <span class=\"ff-monospace\">ACCUMULATOR</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_MONDAY":{"description":"Sets the value of <span class=\"ff-monospace\">MONDAY</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">MONDAY</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_TUESDAY":{"description":"Sets the value of <span class=\"ff-monospace\">TUESDAY</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">TUESDAY</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_WEDNESDAY":{"description":"Sets the value of <span class=\"ff-monospace\">WEDNESDAY</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">WEDNESDAY</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_THURSDAY":{"description":"Sets the value of <span class=\"ff-monospace\">THURSDAY</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">THURSDAY</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_FRIDAY":{"description":"Sets the value of <span class=\"ff-monospace\">FRIDAY</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">FRIDAY</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_G7":{"description":"Sets the value of <span class=\"ff-monospace\">G7</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">G7</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_G8":{"description":"Sets the value of <span class=\"ff-monospace\">G8</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">G8</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_G9":{"description":"Sets the value of <span class=\"ff-monospace\">G9</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">G9</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_G10":{"description":"Sets the value of <span class=\"ff-monospace\">G10</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">G10</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_G11":{"description":"Sets the value of <span class=\"ff-monospace\">G11</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">G11</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_G12":{"description":"Sets the value of <span class=\"ff-monospace\">G12</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">G12</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_G13":{"description":"Sets the value of <span class=\"ff-monospace\">G13</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">G13</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_G14":{"description":"Sets the value of <span class=\"ff-monospace\">G14</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">G14</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"LOAD_STKPTR":{"description":"Sets the value of <span class=\"ff-monospace\">STKPTR</span> to the provided value","args":[{"description":"The value to write into <span class=\"ff-monospace\">STKPTR</span>","dataType":"inline-quad","lexicalType":"integer","name":"value"}],"flags":{}},"COPY":{"description":"Writes the value of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">copyFrom</span><span class=\"resolved-arg-name\">TODO</span></span> into <span class=\"ff-monospace\"><span class=\"generic-arg-name\">copyTo</span><span class=\"resolved-arg-name\">TODO</span></span>.\nThe registers must be the same size.","args":[{"description":"The register from which to copy the value","dataType":"regref-any","lexicalType":"integer","name":"copyFrom"},{"description":"The register to be updated with the copied value","dataType":"regref-any","lexicalType":"integer","name":"copyTo"}],"flags":{}},"INC":{"description":"Adds 1 to the specified register","args":[{"description":"The register to be incremented","dataType":"regref-any","lexicalType":"integer","name":"register"}],"flags":{}},"DEC":{"description":"Subtracts 1 from the specified register","args":[{"description":"The register to be decremented","dataType":"regref-any","lexicalType":"integer","name":"register"}],"flags":{}},"BITAND":{"description":"Computes the bitwise AND value of <span class=\"ff-monospace\">ACCUMULATOR</span> and the provided register","args":[{"description":"The value with which to compute the bitwise AND","dataType":"regref-any","lexicalType":"integer","name":"value"}],"flags":{}},"BITOR":{"description":"Computes the bitwise OR value of <span class=\"ff-monospace\">ACCUMULATOR</span> and the provided register","args":[{"description":"The value with which to compute the bitwise OR","dataType":"regref-any","lexicalType":"integer","name":"value"}],"flags":{}},"BITXOR":{"description":"Computes the bitwise exclusive OR (XOR) value of <span class=\"ff-monospace\">ACCUMULATOR</span> and the provided register","args":[{"description":"The value with which to compute the bitwise XOR","dataType":"regref-any","lexicalType":"integer","name":"value"}],"flags":{}},"BITLSHIFT":{"description":"Shifts the value of <span class=\"ff-monospace\">ACCUMULATOR</span> to the left by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">shiftAmount</span><span class=\"resolved-arg-name\">TODO</span></span> bits","args":[{"description":"The amount by which to shift <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-any","lexicalType":"integer","name":"shiftAmount"}],"flags":{}},"BITRSHIFT":{"description":"Shifts the value of <span class=\"ff-monospace\">ACCUMULATOR</span> to the right by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">shiftAmount</span><span class=\"resolved-arg-name\">TODO</span></span> bits","args":[{"description":"The amount by which to shift <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-any","lexicalType":"integer","name":"shiftAmount"}],"flags":{}},"BITNOT":{"description":"Computes the bitwise inverse (NOT) value of <span class=\"ff-monospace\">ACCUMULATOR</span>","args":[],"flags":{}},"EQ":{"description":"Compares <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing a non-zero value in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> if the input values are equal","args":[{"description":"The left-side value to be compared","dataType":"regref-any","lexicalType":"integer","name":"lvalue"},{"description":"The right-side value to be compared","dataType":"regref-any","lexicalType":"integer","name":"rvalue"},{"description":"The register in which to store the comparison result","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{}},"GT":{"description":"Compares <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing a non-zero value in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> is greater than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The left-side value to be compared","dataType":"regref-any","lexicalType":"integer","name":"lvalue"},{"description":"The right-side value to be compared","dataType":"regref-any","lexicalType":"integer","name":"rvalue"},{"description":"The register in which to store the comparison result","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{}},"LT":{"description":"Compares <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing a non-zero value in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The left-side value to be compared","dataType":"regref-any","lexicalType":"integer","name":"lvalue"},{"description":"The right-side value to be compared","dataType":"regref-any","lexicalType":"integer","name":"rvalue"},{"description":"The register in which to store the comparison result","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{}},"JMP":{"description":"Sets the <span class=\"ff-monospace\">INSTRUCTIONPTR</span> register to the value of the provided address","args":[{"description":"The address to jump to","dataType":"regref-full","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the provided address is greater than the amount of memory available to the computer"}},"JNZ":{"description":"Sets the <span class=\"ff-monospace\">INSTRUCTIONPTR</span> register to the value of the provided address if the value of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">condition</span><span class=\"resolved-arg-name\">TODO</span></span> is non-zero","args":[{"description":"The value to compare to zero","dataType":"regref-any","lexicalType":"integer","name":"condition"},{"description":"The address to jump to if the condition is non-zero","dataType":"inline-quad","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the provided address is greater than the amount of memory available to the computer"}},"JZ":{"description":"Sets the <span class=\"ff-monospace\">INSTRUCTIONPTR</span> register to the value of the provided address if the value of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">condition</span><span class=\"resolved-arg-name\">TODO</span></span> is zero","args":[{"description":"The value to compare to zero","dataType":"regref-any","lexicalType":"integer","name":"condition"},{"description":"The address to jump to if the condition is zero","dataType":"inline-quad","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the provided address is greater than the amount of memory available to the computer"}},"JMPI":{"description":"Sets the <span class=\"ff-monospace\">INSTRUCTIONPTR</span> register to the value of the provided address","args":[{"description":"The address to jump to","dataType":"inline-quad","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the provided address is greater than the amount of memory available to the computer"}},"JNZI":{"description":"Sets the <span class=\"ff-monospace\">INSTRUCTIONPTR</span> register to the value of the provided address if the value of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">condition</span><span class=\"resolved-arg-name\">TODO</span></span> is non-zero","args":[{"description":"The value to compare to zero","dataType":"inline-byte","lexicalType":"integer","name":"condition"},{"description":"The address to jump to if the condition is non-zero","dataType":"inline-tri","lexicalType":"address","name":"address"}],"flags":{"OutOfBounds":"Raised if the provided address is greater than the amount of memory available to the computer"}},"JZI":{"description":"Sets the <span class=\"ff-monospace\">INSTRUCTIONPTR</span> register to the value of the provided address if the value of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">condition</span><span class=\"resolved-arg-name\">TODO</span></span> is zero","args":[{"description":"The value to compare to zero","dataType":"inline-byte","lexicalType":"integer","name":"condition"},{"description":"The address to jump to if the condition is zero","dataType":"inline-tri","lexicalType":"integer","name":"address"}],"flags":{"OutOfBounds":"Raised if the provided address is greater than the amount of memory available to the computer"}},"ADDF":{"description":"Computes the real number sum of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> and <span class=\"ff-monospace\">ACCUMULATOR</span>","args":[{"description":"The number to be added to <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"real","name":"value"}],"flags":{}},"SUBF":{"description":"Computes the real number difference of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number to be subtracted from <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"real","name":"value"}],"flags":{}},"MULTF":{"description":"Computes the real number product of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number by which to multiply <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"real","name":"value"}],"flags":{}},"DIVF":{"description":"Computes the (real number) quotient of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number by which to divide <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"real","name":"value"}],"flags":{}},"FLOORF":{"description":"Computes the largest whole real number value that is less than or equal to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The value to find the floor of","dataType":"regref-full","lexicalType":"real","name":"lvalue"},{"description":"The register in which to store the result","dataType":"regref-full","lexicalType":"real","name":"destination"}],"flags":{}},"CEILF":{"description":"Computes the smallest whole real number value that is greater than or equal to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The value to find the ceiling of","dataType":"regref-full","lexicalType":"real","name":"lvalue"},{"description":"The register in which to store the result","dataType":"regref-full","lexicalType":"real","name":"destination"}],"flags":{}},"ROUNDF":{"description":"Finds the closest whole real number value to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The value to be rounded","dataType":"regref-full","lexicalType":"real","name":"lvalue"},{"description":"The register in which to store the result","dataType":"regref-full","lexicalType":"real","name":"destination"}],"flags":{}},"FLAG_ACK":{"description":"Checks the flag specified by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">flagCode</span><span class=\"resolved-arg-name\">TODO</span></span>, storing in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> the value 1 if the flag is raised or 0 if it is not raised. The flag is cleared after this instruction is completed.","args":[{"description":"The register in which to store the result of the check","dataType":"regref-any","lexicalType":"integer","name":"destination"},{"description":"The flag to be checked","dataType":"inline-byte","lexicalType":"flag","name":"flagCode"}],"flags":{"IllegalArgument":"Raised if the specified flag code is invalid"}},"ADDV":{"description":"Computes the signed sum of <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> and <span class=\"ff-monospace\">ACCUMULATOR</span>","args":[{"description":"The number to be added to <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"signed-integer","name":"value"}],"flags":{}},"SUBV":{"description":"Computes the signed difference of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number to be subtracted from <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"signed-integer","name":"value"}],"flags":{}},"MULTV":{"description":"Computes the signed product of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number by which to multiply <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"signed-integer","name":"value"}],"flags":{}},"DIVV":{"description":"Computes the signed (integer) quotient of <span class=\"ff-monospace\">ACCUMULATOR</span> and <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number by which to divide <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"signed-integer","name":"value"}],"flags":{}},"MODV":{"description":"Computes the signed integer remainder of <span class=\"ff-monospace\">ACCUMULATOR</span> divided by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The number by which to divide <span class=\"ff-monospace\">ACCUMULATOR</span>","dataType":"regref-full","lexicalType":"signed-integer","name":"value"}],"flags":{}},"EQV":{"description":"Compares <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing a non-zero value in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> if the input values are equal","args":[{"description":"The left-side value to be compared","dataType":"regref-full","lexicalType":"signed-integer","name":"lvalue"},{"description":"The right-side value to be compared","dataType":"regref-full","lexicalType":"signed-integer","name":"rvalue"},{"description":"The register in which to store the comparison result","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{}},"GTV":{"description":"Compares <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing a non-zero value in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> is greater than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The left-side value to be compared","dataType":"regref-full","lexicalType":"signed-integer","name":"lvalue"},{"description":"The right-side value to be compared","dataType":"regref-full","lexicalType":"signed-integer","name":"rvalue"},{"description":"The register in which to store the comparison result","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{}},"LTV":{"description":"Compares <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>, storing a non-zero value in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">lvalue</span><span class=\"resolved-arg-name\">TODO</span></span> is less than <span class=\"ff-monospace\"><span class=\"generic-arg-name\">rvalue</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The left-side value to be compared","dataType":"regref-full","lexicalType":"signed-integer","name":"lvalue"},{"description":"The right-side value to be compared","dataType":"regref-full","lexicalType":"signed-integer","name":"rvalue"},{"description":"The register in which to store the comparison result","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{}},"ABSV":{"description":"Calculates the absolute value of signed integer <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The value to be converted","dataType":"regref-any","lexicalType":"signed-integer","name":"value"},{"description":"The register in which to store the converted value","dataType":"regref-any","lexicalType":"signed-integer","name":"destination"}],"flags":{}},"NEGV":{"description":"Calculates the negative value of signed integer <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>. If <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> is already negative, then the resultant value is equal to <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The value to be negated","dataType":"regref-any","lexicalType":"signed-integer","name":"value"},{"description":"The register in which to store the converted value","dataType":"regref-any","lexicalType":"signed-integer","name":"destination"}],"flags":{}},"VEC":{"description":"","args":[],"flags":{}},"VEC_NEG":{"description":"","args":[],"flags":{}},"MAG":{"description":"Computes the absolute value of signed integer <span class=\"ff-monospace\"><span class=\"generic-arg-name\">value</span><span class=\"resolved-arg-name\">TODO</span></span> as an unsigned integer, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The value to be converted","dataType":"regref-any","lexicalType":"signed-integer","name":"value"},{"description":"The register in which to store the absolute value","dataType":"regref-any","lexicalType":"integer","name":"destination"}],"flags":{}},"LOAD_D":{"description":"Loads the double-byte value <span class=\"ff-monospace\"><span class=\"generic-arg-name\">inlineValue</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The register to be updated with the provided value","dataType":"regref-double","lexicalType":"integer","name":"destination"},{"description":"The value with which to update the register ","dataType":"inline-double","lexicalType":"integer","name":"inlineValue"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a double-byte register mask"}},"LOAD_B":{"description":"Loads the byte value <span class=\"ff-monospace\"><span class=\"generic-arg-name\">inlineValue</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The register to be updated with the provided value","dataType":"regref-byte","lexicalType":"integer","name":"destination"},{"description":"The value with which to update the register","dataType":"inline-byte","lexicalType":"integer","name":"inlineValue"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte register mask"}},"LOAD_X":{"description":"Loads the tri-byte value <span class=\"ff-monospace\"><span class=\"generic-arg-name\">inlineValue</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The register to be updated with the provided value","dataType":"regref-tri","lexicalType":"integer","name":"destination"},{"description":"The value with which to update the register","dataType":"inline-tri","lexicalType":"integer","name":"inlineValue"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a tri-byte register mask"}},"NO_OP":{"description":"Performs no action. Note that <span class=\"ff-monospace\">INSTRUCTIONPTR</span> will still be incremented.","args":[],"flags":{}},"ISCAN":{"description":"Scans the I/O channel specified by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> and returns the number of bytes available for reading by the computer, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel to be scanned","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register in which to store the number of bytes available for reading","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte register mask","IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an output channel or if no device is installed"}},"OSCAN":{"description":"Scans the I/O channel specified by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> and returns the number of bytes available for writing by the computer, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel to be scanned","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register in which to store the number of bytes available for writing","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{"IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an input channel or if no device is installed","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte register mask"}},"IOSTAT":{"description":"Gets the current IoPortStatus (0 = Null, 1 = Reserved, 2 = FullDuplex, 3 = ClientWritable, 4 = HostWritable) of the I/O port specified by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>. If no device is installed in the channel, the status is 0 / Null","args":[{"description":"The I/O portto be scanned","dataType":"regref-byte","lexicalType":"integer","name":"port"},{"description":"The register in which to store the status","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte register mask"}},"IOREAD_B":{"description":"Reads 1 byte written by the device in I/O channel <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel from which to read","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register to which the I/O data will be written","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte register mask","IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an output channel or has no installed device, or if the device does not have at least 1 byte available for reading"}},"IOREAD_D":{"description":"Reads 2 bytes written by the device in I/O channel <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel from which to read","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register to which the I/O data will be written","dataType":"regref-double","lexicalType":"integer","name":"destination"}],"flags":{"IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an output channel or has no installed device, or if the device does not have at least 2 bytes available for reading","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a double-byte register mask"}},"IOREAD_X":{"description":"Reads 3 bytes written by the device in I/O channel <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel from which to read","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register to which the I/O data will be written","dataType":"regref-tri","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a tri-byte register mask","IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an output channel or has no installed device, or if the device does not have at least 3 bytes available for reading"}},"IOREAD_Q":{"description":"Reads 4 bytes written by the device in I/O channel <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> into register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel from which to read","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register to which the I/O data will be written","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad-byte register mask","IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an output channel or has no installed device, or if the device does not have at least 4 bytes available for reading"}},"IOWRITE_B":{"description":"Writes 1 byte from register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">source</span><span class=\"resolved-arg-name\">TODO</span></span> to the buffer for I/O channel <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel to be written to","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register from which the data will be fetched","dataType":"regref-byte","lexicalType":"integer","name":"source"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">source</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte register mask","IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an input channel or has no installed device, or if the input buffer does not have an available capacity of at least 1 byte"}},"IOWRITE_D":{"description":"Writes 2 bytes from register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">source</span><span class=\"resolved-arg-name\">TODO</span></span> to the buffer for I/O channel <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel to be written to","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register from which the data will be fetched","dataType":"regref-double","lexicalType":"integer","name":"source"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">source</span><span class=\"resolved-arg-name\">TODO</span></span> is not a double-byte register mask","IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an input channel or has no installed device, or if the input buffer does not have an available capacity of at least 2 bytes"}},"IOWRITE_X":{"description":"Writes 3 bytes from register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">source</span><span class=\"resolved-arg-name\">TODO</span></span> to the buffer for I/O channel <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel to be written to","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register from which the data will be fetched","dataType":"regref-tri","lexicalType":"integer","name":"source"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">source</span><span class=\"resolved-arg-name\">TODO</span></span> is not a tri-byte register mask","IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an input channel or has no installed device, or if the input buffer does not have an available capacity of at least 3 bytes"}},"IOWRITE_Q":{"description":"Writes 4 bytes from register <span class=\"ff-monospace\"><span class=\"generic-arg-name\">source</span><span class=\"resolved-arg-name\">TODO</span></span> to the buffer for I/O channel <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The I/O channel to be written to","dataType":"regref-byte","lexicalType":"integer","name":"channel"},{"description":"The register from which the data will be fetched","dataType":"regref-full","lexicalType":"integer","name":"source"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">source</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad-byte register mask","IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an input channel or has no installed device, or if the input buffer does not have an available capacity of at least 4 bytes"}},"IOFLUSH":{"description":"Commits the bytes written out by the computer to the I/O controller, making them available for reading by the device","args":[{"description":"The I/O channel to be flushed","dataType":"regref-byte","lexicalType":"integer","name":"channel"}],"flags":{"IORejection":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">channel</span><span class=\"resolved-arg-name\">TODO</span></span> is not an input channel or has no installed device, or if there are no pending bytes to be written"}},"PERF_INFO":{"description":"Fetches the 32-bit clock speed of the CPU (in KHz), storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The register in which to write the clock speed","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad-byte register mask"}},"MODEL_INFO":{"description":"Fetches the 32-bit model detail of the CPU, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>\n\nBytes 0 and 1: CPU Model Identifier\nByte 2: CPU Feature Mask 1\nByte 3: CPU Feature Mask 2","args":[{"description":"The register in which to write the model","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad-byte register mask"}},"SERIAL_NUMBER":{"description":"Fetches the 32-bit serial number of the CPU, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The register in which to write the serial number","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad-byte register mask"}},"TICKS":{"description":"","args":[],"flags":{}},"MEMSIZE":{"description":"Gets the total amount of memory available to the computer (in bytes) and places the value in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"Register in which to store the amount of random access memory available to the computer, in bytes","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{}},"FLAGS":{"description":"Fetches the state of each flag and stores the bitwise representation in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>","args":[{"description":"The register in which to store the flag states","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte-sized register"}},"IODEV_IDP":{"description":"Gets the primary device identifier of the device installed in the I/O port specified by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>. If no device is installed in the port, the IOREJECTION flag is raised.","args":[{"description":"The I/O port of the device","dataType":"regref-byte","lexicalType":"integer","name":"port"},{"description":"The register in which to write the primary identifier","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte-sized register or if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad-byte register","IORejection":"Raised if no device is installed in the port"}},"IODEV_IDS":{"description":"Gets the secondary device identifier of the device installed in the I/O port specified by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>. If no device is installed in the port, the IOREJECTION flag is raised.","args":[{"description":"The I/O port of the device","dataType":"regref-byte","lexicalType":"integer","name":"port"},{"description":"The register in which to write the secondary identifier","dataType":"regref-full","lexicalType":"integer","name":"destination"}],"flags":{"IORejection":"Raised if no device is installed in the port","RegisterSizeMismatch":"Raised if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte-sized register or if <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a quad-byte register"}},"IODEV_CLS":{"description":"Gets the service class of the device installed in the I/O port specified by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>. If no device is installed in the port, the IOREJECTION flag is raised.","args":[{"description":"The I/O port of the device","dataType":"regref-byte","lexicalType":"integer","name":"port"},{"description":"The register in which to write the service class","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{"RegisterSizeMismatch":"Raised if either <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span> or <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte-sized register","IORejection":"Raised if no device is installed in the port"}},"IODEV_CLSX":{"description":"Gets the extended service class of the device installed in the I/O port specified by <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span>, storing the result in <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span>. If no device is installed in the port, the IOREJECTION flag is raised.","args":[{"description":"The I/O port of the device","dataType":"regref-byte","lexicalType":"integer","name":"port"},{"description":"The register in which to write the extended service class","dataType":"regref-byte","lexicalType":"integer","name":"destination"}],"flags":{"IORejection":"Raised if no device is installed in the port","RegisterSizeMismatch":"Raised if either <span class=\"ff-monospace\"><span class=\"generic-arg-name\">port</span><span class=\"resolved-arg-name\">TODO</span></span> or <span class=\"ff-monospace\"><span class=\"generic-arg-name\">destination</span><span class=\"resolved-arg-name\">TODO</span></span> is not a byte-sized register"}},"END":{"description":"Places the computer in the IDLE state, ending the CPU pipeline loop","args":[],"flags":{}}}}